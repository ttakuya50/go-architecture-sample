// Code generated by MockGen. DO NOT EDIT.
// Source: list.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/ttakuya50/go-architecture-sample/api/domain/model"
)

// MockListRepo is a mock of ListRepo interface.
type MockListRepo struct {
	ctrl     *gomock.Controller
	recorder *MockListRepoMockRecorder
}

// MockListRepoMockRecorder is the mock recorder for MockListRepo.
type MockListRepoMockRecorder struct {
	mock *MockListRepo
}

// NewMockListRepo creates a new mock instance.
func NewMockListRepo(ctrl *gomock.Controller) *MockListRepo {
	mock := &MockListRepo{ctrl: ctrl}
	mock.recorder = &MockListRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListRepo) EXPECT() *MockListRepoMockRecorder {
	return m.recorder
}

// BulkDelete mocks base method.
func (m *MockListRepo) BulkDelete(ctx context.Context, db ContextExecutor, lists []*model.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", ctx, db, lists)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDelete indicates an expected call of BulkDelete.
func (mr *MockListRepoMockRecorder) BulkDelete(ctx, db, lists interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockListRepo)(nil).BulkDelete), ctx, db, lists)
}

// Create mocks base method.
func (m *MockListRepo) Create(ctx context.Context, db ContextExecutor, ID, userID int64, title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, db, ID, userID, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockListRepoMockRecorder) Create(ctx, db, ID, userID, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockListRepo)(nil).Create), ctx, db, ID, userID, title)
}
